// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: discount.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DiscountProtoService_GetDiscount_FullMethodName    = "/grpc.DiscountProtoService/GetDiscount"
	DiscountProtoService_CreateDiscount_FullMethodName = "/grpc.DiscountProtoService/CreateDiscount"
	DiscountProtoService_UpdateDiscount_FullMethodName = "/grpc.DiscountProtoService/UpdateDiscount"
	DiscountProtoService_DeleteDiscount_FullMethodName = "/grpc.DiscountProtoService/DeleteDiscount"
)

// DiscountProtoServiceClient is the client API for DiscountProtoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscountProtoServiceClient interface {
	GetDiscount(ctx context.Context, in *GetDiscountRequest, opts ...grpc.CallOption) (*CouponModel, error)
	CreateDiscount(ctx context.Context, in *CreateDiscountRequest, opts ...grpc.CallOption) (*CouponModel, error)
	UpdateDiscount(ctx context.Context, in *UpdateDiscountRequest, opts ...grpc.CallOption) (*CouponModel, error)
	DeleteDiscount(ctx context.Context, in *DeleteDiscountRequest, opts ...grpc.CallOption) (*DeleteDiscountResponse, error)
}

type discountProtoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscountProtoServiceClient(cc grpc.ClientConnInterface) DiscountProtoServiceClient {
	return &discountProtoServiceClient{cc}
}

func (c *discountProtoServiceClient) GetDiscount(ctx context.Context, in *GetDiscountRequest, opts ...grpc.CallOption) (*CouponModel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CouponModel)
	err := c.cc.Invoke(ctx, DiscountProtoService_GetDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountProtoServiceClient) CreateDiscount(ctx context.Context, in *CreateDiscountRequest, opts ...grpc.CallOption) (*CouponModel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CouponModel)
	err := c.cc.Invoke(ctx, DiscountProtoService_CreateDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountProtoServiceClient) UpdateDiscount(ctx context.Context, in *UpdateDiscountRequest, opts ...grpc.CallOption) (*CouponModel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CouponModel)
	err := c.cc.Invoke(ctx, DiscountProtoService_UpdateDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountProtoServiceClient) DeleteDiscount(ctx context.Context, in *DeleteDiscountRequest, opts ...grpc.CallOption) (*DeleteDiscountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDiscountResponse)
	err := c.cc.Invoke(ctx, DiscountProtoService_DeleteDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscountProtoServiceServer is the server API for DiscountProtoService service.
// All implementations must embed UnimplementedDiscountProtoServiceServer
// for forward compatibility.
type DiscountProtoServiceServer interface {
	GetDiscount(context.Context, *GetDiscountRequest) (*CouponModel, error)
	CreateDiscount(context.Context, *CreateDiscountRequest) (*CouponModel, error)
	UpdateDiscount(context.Context, *UpdateDiscountRequest) (*CouponModel, error)
	DeleteDiscount(context.Context, *DeleteDiscountRequest) (*DeleteDiscountResponse, error)
	mustEmbedUnimplementedDiscountProtoServiceServer()
}

// UnimplementedDiscountProtoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDiscountProtoServiceServer struct{}

func (UnimplementedDiscountProtoServiceServer) GetDiscount(context.Context, *GetDiscountRequest) (*CouponModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscount not implemented")
}
func (UnimplementedDiscountProtoServiceServer) CreateDiscount(context.Context, *CreateDiscountRequest) (*CouponModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDiscount not implemented")
}
func (UnimplementedDiscountProtoServiceServer) UpdateDiscount(context.Context, *UpdateDiscountRequest) (*CouponModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDiscount not implemented")
}
func (UnimplementedDiscountProtoServiceServer) DeleteDiscount(context.Context, *DeleteDiscountRequest) (*DeleteDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDiscount not implemented")
}
func (UnimplementedDiscountProtoServiceServer) mustEmbedUnimplementedDiscountProtoServiceServer() {}
func (UnimplementedDiscountProtoServiceServer) testEmbeddedByValue()                              {}

// UnsafeDiscountProtoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscountProtoServiceServer will
// result in compilation errors.
type UnsafeDiscountProtoServiceServer interface {
	mustEmbedUnimplementedDiscountProtoServiceServer()
}

func RegisterDiscountProtoServiceServer(s grpc.ServiceRegistrar, srv DiscountProtoServiceServer) {
	// If the following call pancis, it indicates UnimplementedDiscountProtoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DiscountProtoService_ServiceDesc, srv)
}

func _DiscountProtoService_GetDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountProtoServiceServer).GetDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscountProtoService_GetDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountProtoServiceServer).GetDiscount(ctx, req.(*GetDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscountProtoService_CreateDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountProtoServiceServer).CreateDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscountProtoService_CreateDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountProtoServiceServer).CreateDiscount(ctx, req.(*CreateDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscountProtoService_UpdateDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountProtoServiceServer).UpdateDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscountProtoService_UpdateDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountProtoServiceServer).UpdateDiscount(ctx, req.(*UpdateDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscountProtoService_DeleteDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountProtoServiceServer).DeleteDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscountProtoService_DeleteDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountProtoServiceServer).DeleteDiscount(ctx, req.(*DeleteDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscountProtoService_ServiceDesc is the grpc.ServiceDesc for DiscountProtoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscountProtoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.DiscountProtoService",
	HandlerType: (*DiscountProtoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDiscount",
			Handler:    _DiscountProtoService_GetDiscount_Handler,
		},
		{
			MethodName: "CreateDiscount",
			Handler:    _DiscountProtoService_CreateDiscount_Handler,
		},
		{
			MethodName: "UpdateDiscount",
			Handler:    _DiscountProtoService_UpdateDiscount_Handler,
		},
		{
			MethodName: "DeleteDiscount",
			Handler:    _DiscountProtoService_DeleteDiscount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discount.proto",
}
